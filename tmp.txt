{
  flags: 'Interface | Transient',
  escapedName: 'ReadonlyArray',
  checkFlags: ' (0)',
  declarations: 
   [ {
       flags: 'Ambient',
       kind: 'InterfaceDeclaration',
       name: 'ReadonlyArray',
       typeParameters: 
        [ {
            flags: 'Ambient',
            kind: 'TypeParameter',
            name: 'T',
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'TypeParameter',
               escapedName: 'T',
               declarations: [ [Circular] ],
               mergeId: 2 } } ],
       members: 
        [ {
            flags: 'Ambient',
            kind: 'PropertySignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 comment: 'Gets the length of the array. This is a number one higher than the highest element defined in an array.' } ],
            modifiers: [ { flags: 2097152, kind: 'ReadonlyKeyword' } ],
            name: 'length',
            type: { flags: 2097152, kind: 'NumberKeyword' },
            modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
            symbol: 
             {
               flags: 'Property',
               escapedName: 'length',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 4 } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 comment: 'Returns a string representation of an array.' } ],
            name: 'toString',
            parameters: [],
            type: { flags: 2097152, kind: 'StringKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'toString',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 6 },
            locals: Map {},
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'toLocaleString',
               parameters: [],
               type: { flags: 2097152, kind: 'StringKeyword' },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'toLocaleString',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 8 },
               locals: Map {},
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'concat',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 comment: 'Returns a string representation of an array. The elements are converted to string using thier toLocalString methods.' } ],
            name: 'toLocaleString',
            parameters: [],
            type: { flags: 2097152, kind: 'StringKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'toLocaleString',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 8 },
            locals: Map {},
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'concat',
               parameters: [ [NodeObject] ],
               type: 
                {
                  flags: 'Ambient',
                  kind: 'ArrayType',
                  elementType: [NodeObject] },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'concat',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 10 },
               locals: Map { 'items' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'concat',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Combines two or more arrays.' } ],
            name: 'concat',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 dotDotDotToken: [TokenObject],
                 name: 'items',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'concat',
               declarations: [ [Circular], [NodeObject] ],
               valueDeclaration: [Circular],
               mergeId: 10 },
            locals: 
             Map {
               'items' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'items',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'concat',
               parameters: [ [NodeObject] ],
               type: 
                {
                  flags: 'Ambient',
                  kind: 'ArrayType',
                  elementType: [NodeObject] },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'concat',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 10 },
               locals: Map { 'items' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'join',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Combines two or more arrays.' } ],
            name: 'concat',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 dotDotDotToken: [TokenObject],
                 name: 'items',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'concat',
               declarations: [ [NodeObject], [Circular] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'concat',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [Circular] },
               mergeId: 10 },
            locals: 
             Map {
               'items' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'items',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'join',
               parameters: [ [NodeObject] ],
               type: { flags: 2097152, kind: 'StringKeyword' },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'join',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 12 },
               locals: Map { 'separator' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'slice',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Adds all the elements of an array separated by the specified separator string.' } ],
            name: 'join',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'separator',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'StringKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'join',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 12 },
            locals: 
             Map {
               'separator' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'separator',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'slice',
               parameters: [ [NodeObject], [NodeObject] ],
               type: 
                {
                  flags: 'Ambient',
                  kind: 'ArrayType',
                  elementType: [NodeObject] },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'slice',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 14 },
               locals: Map { 'start' => [SymbolObject], 'end' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'indexOf',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Returns a section of an array.' } ],
            name: 'slice',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'start',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'end',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'slice',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 14 },
            locals: 
             Map {
               'start' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'start',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'end' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'end',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'indexOf',
               parameters: [ [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'NumberKeyword' },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'indexOf',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 16 },
               locals: 
                Map {
                  'searchElement' => [SymbolObject],
                  'fromIndex' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'lastIndexOf',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Returns the index of the first occurrence of a value in an array.' } ],
            name: 'indexOf',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'searchElement',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'fromIndex',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'NumberKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'indexOf',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 16 },
            locals: 
             Map {
               'searchElement' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'searchElement',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'fromIndex' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'fromIndex',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'lastIndexOf',
               parameters: [ [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'NumberKeyword' },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'lastIndexOf',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 18 },
               locals: 
                Map {
                  'searchElement' => [SymbolObject],
                  'fromIndex' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'every',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Returns the index of the last occurrence of a specified value in an array.' } ],
            name: 'lastIndexOf',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'searchElement',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'fromIndex',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'NumberKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'lastIndexOf',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 18 },
            locals: 
             Map {
               'searchElement' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'searchElement',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'fromIndex' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'fromIndex',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'every',
               parameters: [ [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'BooleanKeyword' },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'every',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 20 },
               locals: Map { 'callbackfn' => [SymbolObject], 'thisArg' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'FunctionType',
                  parameters: [Array],
                  type: [TokenObject],
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Determines whether all the members of an array satisfy the specified test.' } ],
            name: 'every',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'BooleanKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'every',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 20 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'BooleanKeyword' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'some',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Determines whether the specified callback function returns true for any element of an array.' } ],
            name: 'some',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'BooleanKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'some',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 22 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'BooleanKeyword' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'forEach',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Performs the specified action for each element in an array.' } ],
            name: 'forEach',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'VoidKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'forEach',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 24 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'VoidKeyword' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'map',
                  typeParameters: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Calls a defined callback function on each element of an array, and returns an array that contains the results.' } ],
            name: 'map',
            typeParameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'TypeParameter',
                 name: 'U',
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'map',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 26 },
            locals: 
             Map {
               'U' => {
               flags: 'TypeParameter',
               escapedName: 'U',
               declarations: [Array] },
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'filter',
                  typeParameters: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Returns the elements of an array that meet the condition specified in a callback function.' } ],
            name: 'filter',
            typeParameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'TypeParameter',
                 name: 'S',
                 constraint: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'S' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'filter',
               declarations: [ [Circular], [NodeObject] ],
               valueDeclaration: [Circular],
               mergeId: 28 },
            locals: 
             Map {
               'S' => {
               flags: 'TypeParameter',
               escapedName: 'S',
               declarations: [Array] },
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: 
                {
                  flags: 'Ambient',
                  kind: 'FirstTypeNode',
                  parameterName: 'value',
                  type: [NodeObject] },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'filter',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Returns the elements of an array that meet the condition specified in a callback function.' } ],
            name: 'filter',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'filter',
               declarations: [ [NodeObject], [Circular] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'filter',
                  typeParameters: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [NodeObject] },
               mergeId: 28 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'AnyKeyword' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduce',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
            name: 'reduce',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduce',
               declarations: [ [Circular], [NodeObject], [NodeObject] ],
               valueDeclaration: [Circular],
               mergeId: 30 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  name: 'reduce',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            name: 'reduce',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'initialValue',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduce',
               declarations: [ [NodeObject], [Circular], [NodeObject] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduce',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [NodeObject] },
               mergeId: 30 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'initialValue' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'initialValue',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduce',
                  typeParameters: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
            name: 'reduce',
            typeParameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'TypeParameter',
                 name: 'U',
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'initialValue',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduce',
               declarations: [ [NodeObject], [NodeObject], [Circular] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduce',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [NodeObject] },
               mergeId: 30 },
            locals: 
             Map {
               'U' => {
               flags: 'TypeParameter',
               escapedName: 'U',
               declarations: [Array] },
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'initialValue' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'initialValue',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduceRight',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
            name: 'reduceRight',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduceRight',
               declarations: [ [Circular], [NodeObject], [NodeObject] ],
               valueDeclaration: [Circular],
               mergeId: 32 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  name: 'reduceRight',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            name: 'reduceRight',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'initialValue',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduceRight',
               declarations: [ [NodeObject], [Circular], [NodeObject] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduceRight',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [NodeObject] },
               mergeId: 32 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'initialValue' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'initialValue',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduceRight',
                  typeParameters: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
            name: 'reduceRight',
            typeParameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'TypeParameter',
                 name: 'U',
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'initialValue',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduceRight',
               declarations: [ [NodeObject], [NodeObject], [Circular] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduceRight',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [NodeObject] },
               mergeId: 32 },
            locals: 
             Map {
               'U' => {
               flags: 'TypeParameter',
               escapedName: 'U',
               declarations: [Array] },
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'initialValue' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'initialValue',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'IndexSignature',
                  modifiers: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'IndexSignature',
            modifiers: [ { flags: 2097152, kind: 'ReadonlyKeyword' } ],
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'n',
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
            modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
            symbol: 
             {
               flags: 'Signature',
               escapedName: '__index',
               declarations: [ [Circular] ],
               mergeId: 34 },
            locals: 
             Map {
               'n' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'n',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'InterfaceDeclaration',
               name: 'ArrayConstructor',
               members: 
                [ [NodeObject],
                  [NodeObject],
                  [NodeObject],
                  [NodeObject],
                  [NodeObject],
                  [NodeObject],
                  [NodeObject],
                  [NodeObject] ],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Interface',
                  escapedName: 'ArrayConstructor',
                  declarations: [Array],
                  members: [Map],
                  mergeId: 37 },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'ConstructSignature',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } } ],
       modifierFlagsCache: 'HasComputedFlags (536870912)',
       symbol: 
        {
          flags: 'Interface',
          escapedName: 'ReadonlyArray',
          declarations: [ [Circular] ],
          members: 
           Map {
             'T' => {
             flags: 'TypeParameter',
             escapedName: 'T',
             declarations: [ [NodeObject] ],
             mergeId: 2 },
             'length' => {
             flags: 'Property',
             escapedName: 'length',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'PropertySignature',
                jsDoc: [Array],
                modifiers: [Array],
                name: 'length',
                type: [TokenObject],
                modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
                symbol: [Circular] },
             mergeId: 4 },
             'toString' => {
             flags: 'Method',
             escapedName: 'toString',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'toString',
                parameters: [],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: Map {},
                nextContainer: [NodeObject] },
             mergeId: 6 },
             'toLocaleString' => {
             flags: 'Method',
             escapedName: 'toLocaleString',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'toLocaleString',
                parameters: [],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: Map {},
                nextContainer: [NodeObject] },
             mergeId: 8 },
             'concat' => {
             flags: 'Method',
             escapedName: 'concat',
             declarations: [ [NodeObject], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'concat',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 10 },
             'join' => {
             flags: 'Method',
             escapedName: 'join',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'join',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 12 },
             'slice' => {
             flags: 'Method',
             escapedName: 'slice',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'slice',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 14 },
             'indexOf' => {
             flags: 'Method',
             escapedName: 'indexOf',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'indexOf',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 16 },
             'lastIndexOf' => {
             flags: 'Method',
             escapedName: 'lastIndexOf',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'lastIndexOf',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 18 },
             'every' => {
             flags: 'Method',
             escapedName: 'every',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'every',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 20 },
             'some' => {
             flags: 'Method',
             escapedName: 'some',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'some',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 22 },
             'forEach' => {
             flags: 'Method',
             escapedName: 'forEach',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'forEach',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 24 },
             'map' => {
             flags: 'Method',
             escapedName: 'map',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'map',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 26 },
             'filter' => {
             flags: 'Method',
             escapedName: 'filter',
             declarations: [ [NodeObject], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'filter',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 28 },
             'reduce' => {
             flags: 'Method',
             escapedName: 'reduce',
             declarations: [ [NodeObject], [NodeObject], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduce',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 30 },
             'reduceRight' => {
             flags: 'Method',
             escapedName: 'reduceRight',
             declarations: [ [NodeObject], [NodeObject], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduceRight',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 32 },
             '__index' => {
             flags: 'Signature',
             escapedName: '__index',
             declarations: [ [NodeObject] ],
             mergeId: 34 } },
          mergeId: 1 },
       nextContainer: 
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               comment: 'Returns a string representation of an array.' } ],
          name: 'toString',
          parameters: [],
          type: { flags: 2097152, kind: 'StringKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'toString',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 6 },
          locals: Map {},
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: 
              [ {
                  flags: 'Ambient',
                  kind: 'JSDocComment',
                  comment: 'Returns a string representation of an array. The elements are converted to string using thier toLocalString methods.' } ],
             name: 'toLocaleString',
             parameters: [],
             type: { flags: 2097152, kind: 'StringKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'toLocaleString',
                declarations: [ [Circular] ],
                valueDeclaration: [Circular],
                mergeId: 8 },
             locals: Map {},
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [ [NodeObject] ],
                name: 'concat',
                parameters: [ [NodeObject] ],
                type: 
                 {
                   flags: 'Ambient',
                   kind: 'ArrayType',
                   elementType: [NodeObject] },
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: 
                 {
                   flags: 'Method',
                   escapedName: 'concat',
                   declarations: [Array],
                   valueDeclaration: [Circular],
                   mergeId: 10 },
                locals: Map { 'items' => [SymbolObject] },
                nextContainer: 
                 {
                   flags: 'Ambient',
                   kind: 'MethodSignature',
                   jsDoc: [Array],
                   name: 'concat',
                   parameters: [Array],
                   type: [NodeObject],
                   modifierFlagsCache: 'HasComputedFlags (536870912)',
                   symbol: [SymbolObject],
                   locals: [Map],
                   nextContainer: [NodeObject] } } } } },
     {
       flags: 'Ambient',
       kind: 'InterfaceDeclaration',
       name: 'ReadonlyArray',
       typeParameters: 
        [ {
            flags: 'Ambient',
            kind: 'TypeParameter',
            name: 'T',
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'TypeParameter',
               escapedName: 'T',
               declarations: [ [Circular] ],
               mergeId: 3 } } ],
       members: 
        [ {
            flags: 'Ambient',
            kind: 'PropertySignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 comment: 'Gets the length of the array. This is a number one higher than the highest element defined in an array.' } ],
            modifiers: [ { flags: 2097152, kind: 'ReadonlyKeyword' } ],
            name: 'length',
            type: { flags: 2097152, kind: 'NumberKeyword' },
            modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
            symbol: 
             {
               flags: 'Property',
               escapedName: 'length',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 5 } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 comment: 'Returns a string representation of an array.' } ],
            name: 'toString',
            parameters: [],
            type: { flags: 2097152, kind: 'StringKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'toString',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 7 },
            locals: Map {},
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'toLocaleString',
               parameters: [],
               type: { flags: 2097152, kind: 'StringKeyword' },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'toLocaleString',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 9 },
               locals: Map {},
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'concat',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 comment: 'Returns a string representation of an array. The elements are converted to string using thier toLocalString methods.' } ],
            name: 'toLocaleString',
            parameters: [],
            type: { flags: 2097152, kind: 'StringKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'toLocaleString',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 9 },
            locals: Map {},
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'concat',
               parameters: [ [NodeObject] ],
               type: 
                {
                  flags: 'Ambient',
                  kind: 'ArrayType',
                  elementType: [NodeObject] },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'concat',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 11 },
               locals: Map { 'items' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'concat',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Combines two or more arrays.' } ],
            name: 'concat',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 dotDotDotToken: [TokenObject],
                 name: 'items',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'concat',
               declarations: [ [Circular], [NodeObject] ],
               valueDeclaration: [Circular],
               mergeId: 11 },
            locals: 
             Map {
               'items' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'items',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'concat',
               parameters: [ [NodeObject] ],
               type: 
                {
                  flags: 'Ambient',
                  kind: 'ArrayType',
                  elementType: [NodeObject] },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'concat',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 11 },
               locals: Map { 'items' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'join',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Combines two or more arrays.' } ],
            name: 'concat',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 dotDotDotToken: [TokenObject],
                 name: 'items',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'concat',
               declarations: [ [NodeObject], [Circular] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'concat',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [Circular] },
               mergeId: 11 },
            locals: 
             Map {
               'items' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'items',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'join',
               parameters: [ [NodeObject] ],
               type: { flags: 2097152, kind: 'StringKeyword' },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'join',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 13 },
               locals: Map { 'separator' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'slice',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Adds all the elements of an array separated by the specified separator string.' } ],
            name: 'join',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'separator',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'StringKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'join',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 13 },
            locals: 
             Map {
               'separator' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'separator',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'slice',
               parameters: [ [NodeObject], [NodeObject] ],
               type: 
                {
                  flags: 'Ambient',
                  kind: 'ArrayType',
                  elementType: [NodeObject] },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'slice',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 15 },
               locals: Map { 'start' => [SymbolObject], 'end' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'indexOf',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Returns a section of an array.' } ],
            name: 'slice',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'start',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'end',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'slice',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 15 },
            locals: 
             Map {
               'start' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'start',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'end' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'end',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'indexOf',
               parameters: [ [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'NumberKeyword' },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'indexOf',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 17 },
               locals: 
                Map {
                  'searchElement' => [SymbolObject],
                  'fromIndex' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'lastIndexOf',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Returns the index of the first occurrence of a value in an array.' } ],
            name: 'indexOf',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'searchElement',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'fromIndex',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'NumberKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'indexOf',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 17 },
            locals: 
             Map {
               'searchElement' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'searchElement',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'fromIndex' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'fromIndex',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'lastIndexOf',
               parameters: [ [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'NumberKeyword' },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'lastIndexOf',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 19 },
               locals: 
                Map {
                  'searchElement' => [SymbolObject],
                  'fromIndex' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'every',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Returns the index of the last occurrence of a specified value in an array.' } ],
            name: 'lastIndexOf',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'searchElement',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'fromIndex',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'NumberKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'lastIndexOf',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 19 },
            locals: 
             Map {
               'searchElement' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'searchElement',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'fromIndex' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'fromIndex',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'MethodSignature',
               jsDoc: [ [NodeObject] ],
               name: 'every',
               parameters: [ [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'BooleanKeyword' },
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Method',
                  escapedName: 'every',
                  declarations: [Array],
                  valueDeclaration: [Circular],
                  mergeId: 21 },
               locals: Map { 'callbackfn' => [SymbolObject], 'thisArg' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'FunctionType',
                  parameters: [Array],
                  type: [TokenObject],
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Determines whether all the members of an array satisfy the specified test.' } ],
            name: 'every',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'BooleanKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'every',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 21 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'BooleanKeyword' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'some',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Determines whether the specified callback function returns true for any element of an array.' } ],
            name: 'some',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'BooleanKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'some',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 23 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'BooleanKeyword' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'forEach',
                  parameters: [Array],
                  type: [TokenObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Performs the specified action for each element in an array.' } ],
            name: 'forEach',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 2097152, kind: 'VoidKeyword' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'forEach',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 25 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'VoidKeyword' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'map',
                  typeParameters: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Calls a defined callback function on each element of an array, and returns an array that contains the results.' } ],
            name: 'map',
            typeParameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'TypeParameter',
                 name: 'U',
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'map',
               declarations: [ [Circular] ],
               valueDeclaration: [Circular],
               mergeId: 27 },
            locals: 
             Map {
               'U' => {
               flags: 'TypeParameter',
               escapedName: 'U',
               declarations: [Array] },
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'filter',
                  typeParameters: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Returns the elements of an array that meet the condition specified in a callback function.' } ],
            name: 'filter',
            typeParameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'TypeParameter',
                 name: 'S',
                 constraint: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'S' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'filter',
               declarations: [ [Circular], [NodeObject] ],
               valueDeclaration: [Circular],
               mergeId: 29 },
            locals: 
             Map {
               'S' => {
               flags: 'TypeParameter',
               escapedName: 'S',
               declarations: [Array] },
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: 
                {
                  flags: 'Ambient',
                  kind: 'FirstTypeNode',
                  parameterName: 'value',
                  type: [NodeObject] },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'filter',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Returns the elements of an array that meet the condition specified in a callback function.' } ],
            name: 'filter',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'thisArg',
                 questionToken: [TokenObject],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: 
             {
               flags: 'Ambient',
               kind: 'ArrayType',
               elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'filter',
               declarations: [ [NodeObject], [Circular] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'filter',
                  typeParameters: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [NodeObject] },
               mergeId: 29 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'thisArg' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'thisArg',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 2097152, kind: 'AnyKeyword' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'value' => [SymbolObject],
                  'index' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduce',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
            name: 'reduce',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduce',
               declarations: [ [Circular], [NodeObject], [NodeObject] ],
               valueDeclaration: [Circular],
               mergeId: 31 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  name: 'reduce',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            name: 'reduce',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'initialValue',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduce',
               declarations: [ [NodeObject], [Circular], [NodeObject] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduce',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [NodeObject] },
               mergeId: 31 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'initialValue' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'initialValue',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduce',
                  typeParameters: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
            name: 'reduce',
            typeParameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'TypeParameter',
                 name: 'U',
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'initialValue',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduce',
               declarations: [ [NodeObject], [NodeObject], [Circular] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduce',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [NodeObject] },
               mergeId: 31 },
            locals: 
             Map {
               'U' => {
               flags: 'TypeParameter',
               escapedName: 'U',
               declarations: [Array] },
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'initialValue' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'initialValue',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduceRight',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
            name: 'reduceRight',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduceRight',
               declarations: [ [Circular], [NodeObject], [NodeObject] ],
               valueDeclaration: [Circular],
               mergeId: 33 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  name: 'reduceRight',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            name: 'reduceRight',
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'initialValue',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduceRight',
               declarations: [ [NodeObject], [Circular], [NodeObject] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduceRight',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [NodeObject] },
               mergeId: 33 },
            locals: 
             Map {
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'initialValue' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'initialValue',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduceRight',
                  typeParameters: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'MethodSignature',
            jsDoc: 
             [ {
                 flags: 'Ambient',
                 kind: 'JSDocComment',
                 tags: [Array],
                 comment: 'Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
            name: 'reduceRight',
            typeParameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'TypeParameter',
                 name: 'U',
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'callbackfn',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] },
               {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'initialValue',
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
            modifierFlagsCache: 'HasComputedFlags (536870912)',
            symbol: 
             {
               flags: 'Method',
               escapedName: 'reduceRight',
               declarations: [ [NodeObject], [NodeObject], [Circular] ],
               valueDeclaration: 
                {
                  flags: 'Ambient',
                  kind: 'MethodSignature',
                  jsDoc: [Array],
                  name: 'reduceRight',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [Circular],
                  locals: [Map],
                  nextContainer: [NodeObject] },
               mergeId: 33 },
            locals: 
             Map {
               'U' => {
               flags: 'TypeParameter',
               escapedName: 'U',
               declarations: [Array] },
               'callbackfn' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'callbackfn',
               declarations: [Array],
               valueDeclaration: [NodeObject] },
               'initialValue' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'initialValue',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'FunctionType',
               parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
               type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
               symbol: 
                {
                  flags: 'TypeLiteral',
                  escapedName: '__type',
                  declarations: [Array],
                  members: [Map] },
               locals: 
                Map {
                  'previousValue' => [SymbolObject],
                  'currentValue' => [SymbolObject],
                  'currentIndex' => [SymbolObject],
                  'array' => [SymbolObject] },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'IndexSignature',
                  modifiers: [Array],
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } },
          {
            flags: 'Ambient',
            kind: 'IndexSignature',
            modifiers: [ { flags: 2097152, kind: 'ReadonlyKeyword' } ],
            parameters: 
             [ {
                 flags: 'Ambient',
                 kind: 'Parameter',
                 name: 'n',
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject] } ],
            type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
            modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
            symbol: 
             {
               flags: 'Signature',
               escapedName: '__index',
               declarations: [ [Circular] ],
               mergeId: 35 },
            locals: 
             Map {
               'n' => {
               flags: 'FunctionScopedVariable',
               escapedName: 'n',
               declarations: [Array],
               valueDeclaration: [NodeObject] } },
            nextContainer: 
             {
               flags: 'Ambient',
               kind: 'InterfaceDeclaration',
               name: 'ArrayConstructor',
               members: 
                [ [NodeObject],
                  [NodeObject],
                  [NodeObject],
                  [NodeObject],
                  [NodeObject],
                  [NodeObject],
                  [NodeObject],
                  [NodeObject] ],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: 
                {
                  flags: 'Interface',
                  escapedName: 'ArrayConstructor',
                  declarations: [Array],
                  members: [Map],
                  mergeId: 46 },
               nextContainer: 
                {
                  flags: 'Ambient',
                  kind: 'ConstructSignature',
                  parameters: [Array],
                  type: [NodeObject],
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject],
                  locals: [Map],
                  nextContainer: [NodeObject] } } } ],
       modifierFlagsCache: 'HasComputedFlags (536870912)',
       symbol: 
        {
          flags: 'Interface',
          escapedName: 'ReadonlyArray',
          declarations: [ [Circular] ],
          members: 
           Map {
             'T' => {
             flags: 'TypeParameter',
             escapedName: 'T',
             declarations: [ [NodeObject] ],
             mergeId: 3 },
             'length' => {
             flags: 'Property',
             escapedName: 'length',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'PropertySignature',
                jsDoc: [Array],
                modifiers: [Array],
                name: 'length',
                type: [TokenObject],
                modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
                symbol: [Circular] },
             mergeId: 5 },
             'toString' => {
             flags: 'Method',
             escapedName: 'toString',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'toString',
                parameters: [],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: Map {},
                nextContainer: [NodeObject] },
             mergeId: 7 },
             'toLocaleString' => {
             flags: 'Method',
             escapedName: 'toLocaleString',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'toLocaleString',
                parameters: [],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: Map {},
                nextContainer: [NodeObject] },
             mergeId: 9 },
             'concat' => {
             flags: 'Method',
             escapedName: 'concat',
             declarations: [ [NodeObject], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'concat',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 11 },
             'join' => {
             flags: 'Method',
             escapedName: 'join',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'join',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 13 },
             'slice' => {
             flags: 'Method',
             escapedName: 'slice',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'slice',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 15 },
             'indexOf' => {
             flags: 'Method',
             escapedName: 'indexOf',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'indexOf',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 17 },
             'lastIndexOf' => {
             flags: 'Method',
             escapedName: 'lastIndexOf',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'lastIndexOf',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 19 },
             'every' => {
             flags: 'Method',
             escapedName: 'every',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'every',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 21 },
             'some' => {
             flags: 'Method',
             escapedName: 'some',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'some',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 23 },
             'forEach' => {
             flags: 'Method',
             escapedName: 'forEach',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'forEach',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 25 },
             'map' => {
             flags: 'Method',
             escapedName: 'map',
             declarations: [ [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'map',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 27 },
             'filter' => {
             flags: 'Method',
             escapedName: 'filter',
             declarations: [ [NodeObject], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'filter',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 29 },
             'reduce' => {
             flags: 'Method',
             escapedName: 'reduce',
             declarations: [ [NodeObject], [NodeObject], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduce',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 31 },
             'reduceRight' => {
             flags: 'Method',
             escapedName: 'reduceRight',
             declarations: [ [NodeObject], [NodeObject], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduceRight',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 33 },
             '__index' => {
             flags: 'Signature',
             escapedName: '__index',
             declarations: [ [NodeObject] ],
             mergeId: 35 } },
          mergeId: 36 },
       nextContainer: 
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               comment: 'Returns a string representation of an array.' } ],
          name: 'toString',
          parameters: [],
          type: { flags: 2097152, kind: 'StringKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'toString',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 7 },
          locals: Map {},
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: 
              [ {
                  flags: 'Ambient',
                  kind: 'JSDocComment',
                  comment: 'Returns a string representation of an array. The elements are converted to string using thier toLocalString methods.' } ],
             name: 'toLocaleString',
             parameters: [],
             type: { flags: 2097152, kind: 'StringKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'toLocaleString',
                declarations: [ [Circular] ],
                valueDeclaration: [Circular],
                mergeId: 9 },
             locals: Map {},
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [ [NodeObject] ],
                name: 'concat',
                parameters: [ [NodeObject] ],
                type: 
                 {
                   flags: 'Ambient',
                   kind: 'ArrayType',
                   elementType: [NodeObject] },
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: 
                 {
                   flags: 'Method',
                   escapedName: 'concat',
                   declarations: [Array],
                   valueDeclaration: [Circular],
                   mergeId: 11 },
                locals: Map { 'items' => [SymbolObject] },
                nextContainer: 
                 {
                   flags: 'Ambient',
                   kind: 'MethodSignature',
                   jsDoc: [Array],
                   name: 'concat',
                   parameters: [Array],
                   type: [NodeObject],
                   modifierFlagsCache: 'HasComputedFlags (536870912)',
                   symbol: [SymbolObject],
                   locals: [Map],
                   nextContainer: [NodeObject] } } } } } ],
  members: 
   Map {
     'T' => {
     flags: 'TypeParameter | Transient',
     escapedName: 'T',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'TypeParameter',
          name: 'T',
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'TypeParameter',
             escapedName: 'T',
             declarations: [ [Circular] ],
             mergeId: 2 } },
        {
          flags: 'Ambient',
          kind: 'TypeParameter',
          name: 'T',
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'TypeParameter',
             escapedName: 'T',
             declarations: [ [Circular] ],
             mergeId: 3 } } ],
     declaredType: { flags: 'TypeParameter', id: 42, symbol: [Circular] } },
     'length' => {
     flags: 'Property | Transient',
     escapedName: 'length',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'PropertySignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               comment: 'Gets the length of the array. This is a number one higher than the highest element defined in an array.' } ],
          modifiers: [ { flags: 2097152, kind: 'ReadonlyKeyword' } ],
          name: 'length',
          type: { flags: 2097152, kind: 'NumberKeyword' },
          modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
          symbol: 
           {
             flags: 'Property',
             escapedName: 'length',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 4 } },
        {
          flags: 'Ambient',
          kind: 'PropertySignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               comment: 'Gets the length of the array. This is a number one higher than the highest element defined in an array.' } ],
          modifiers: [ { flags: 2097152, kind: 'ReadonlyKeyword' } ],
          name: 'length',
          type: { flags: 2097152, kind: 'NumberKeyword' },
          modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
          symbol: 
           {
             flags: 'Property',
             escapedName: 'length',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 5 } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'PropertySignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             comment: 'Gets the length of the array. This is a number one higher than the highest element defined in an array.' } ],
        modifiers: [ { flags: 2097152, kind: 'ReadonlyKeyword' } ],
        name: 'length',
        type: { flags: 2097152, kind: 'NumberKeyword' },
        modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
        symbol: 
         {
           flags: 'Property',
           escapedName: 'length',
           declarations: [ [Circular] ],
           valueDeclaration: [Circular],
           mergeId: 4 } } },
     'toString' => {
     flags: 'Method | Transient',
     escapedName: 'toString',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               comment: 'Returns a string representation of an array.' } ],
          name: 'toString',
          parameters: [],
          type: { flags: 2097152, kind: 'StringKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'toString',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 6 },
          locals: Map {},
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'toLocaleString',
             parameters: [],
             type: { flags: 2097152, kind: 'StringKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'toLocaleString',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 8 },
             locals: Map {},
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'concat',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               comment: 'Returns a string representation of an array.' } ],
          name: 'toString',
          parameters: [],
          type: { flags: 2097152, kind: 'StringKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'toString',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 7 },
          locals: Map {},
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'toLocaleString',
             parameters: [],
             type: { flags: 2097152, kind: 'StringKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'toLocaleString',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 9 },
             locals: Map {},
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'concat',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             comment: 'Returns a string representation of an array.' } ],
        name: 'toString',
        parameters: [],
        type: { flags: 2097152, kind: 'StringKeyword' },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'toString',
           declarations: [ [Circular] ],
           valueDeclaration: [Circular],
           mergeId: 6 },
        locals: Map {},
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'MethodSignature',
           jsDoc: 
            [ {
                flags: 'Ambient',
                kind: 'JSDocComment',
                comment: 'Returns a string representation of an array. The elements are converted to string using thier toLocalString methods.' } ],
           name: 'toLocaleString',
           parameters: [],
           type: { flags: 2097152, kind: 'StringKeyword' },
           modifierFlagsCache: 'HasComputedFlags (536870912)',
           symbol: 
            {
              flags: 'Method',
              escapedName: 'toLocaleString',
              declarations: [ [Circular] ],
              valueDeclaration: [Circular],
              mergeId: 8 },
           locals: Map {},
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              jsDoc: [ [NodeObject] ],
              name: 'concat',
              parameters: [ [NodeObject] ],
              type: 
               {
                 flags: 'Ambient',
                 kind: 'ArrayType',
                 elementType: [NodeObject] },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'concat',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 10 },
              locals: Map { 'items' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'MethodSignature',
                 jsDoc: [Array],
                 name: 'concat',
                 parameters: [Array],
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'toLocaleString' => {
     flags: 'Method | Transient',
     escapedName: 'toLocaleString',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               comment: 'Returns a string representation of an array. The elements are converted to string using thier toLocalString methods.' } ],
          name: 'toLocaleString',
          parameters: [],
          type: { flags: 2097152, kind: 'StringKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'toLocaleString',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 8 },
          locals: Map {},
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'concat',
             parameters: [ [NodeObject] ],
             type: 
              {
                flags: 'Ambient',
                kind: 'ArrayType',
                elementType: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'concat',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 10 },
             locals: Map { 'items' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'concat',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               comment: 'Returns a string representation of an array. The elements are converted to string using thier toLocalString methods.' } ],
          name: 'toLocaleString',
          parameters: [],
          type: { flags: 2097152, kind: 'StringKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'toLocaleString',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 9 },
          locals: Map {},
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'concat',
             parameters: [ [NodeObject] ],
             type: 
              {
                flags: 'Ambient',
                kind: 'ArrayType',
                elementType: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'concat',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 11 },
             locals: Map { 'items' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'concat',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             comment: 'Returns a string representation of an array. The elements are converted to string using thier toLocalString methods.' } ],
        name: 'toLocaleString',
        parameters: [],
        type: { flags: 2097152, kind: 'StringKeyword' },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'toLocaleString',
           declarations: [ [Circular] ],
           valueDeclaration: [Circular],
           mergeId: 8 },
        locals: Map {},
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'MethodSignature',
           jsDoc: 
            [ {
                flags: 'Ambient',
                kind: 'JSDocComment',
                tags: [Array],
                comment: 'Combines two or more arrays.' } ],
           name: 'concat',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                dotDotDotToken: [TokenObject],
                name: 'items',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: 
            {
              flags: 'Ambient',
              kind: 'ArrayType',
              elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
           modifierFlagsCache: 'HasComputedFlags (536870912)',
           symbol: 
            {
              flags: 'Method',
              escapedName: 'concat',
              declarations: [ [Circular], [NodeObject] ],
              valueDeclaration: [Circular],
              mergeId: 10 },
           locals: 
            Map {
              'items' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'items',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              jsDoc: [ [NodeObject] ],
              name: 'concat',
              parameters: [ [NodeObject] ],
              type: 
               {
                 flags: 'Ambient',
                 kind: 'ArrayType',
                 elementType: [NodeObject] },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'concat',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 10 },
              locals: Map { 'items' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'MethodSignature',
                 jsDoc: [Array],
                 name: 'join',
                 parameters: [Array],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'concat' => {
     flags: 'Method | Transient',
     escapedName: 'concat',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Combines two or more arrays.' } ],
          name: 'concat',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               dotDotDotToken: [TokenObject],
               name: 'items',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'concat',
             declarations: [ [Circular], [NodeObject] ],
             valueDeclaration: [Circular],
             mergeId: 10 },
          locals: 
           Map {
             'items' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'items',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'concat',
             parameters: [ [NodeObject] ],
             type: 
              {
                flags: 'Ambient',
                kind: 'ArrayType',
                elementType: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'concat',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 10 },
             locals: Map { 'items' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'join',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Combines two or more arrays.' } ],
          name: 'concat',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               dotDotDotToken: [TokenObject],
               name: 'items',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'concat',
             declarations: [ [NodeObject], [Circular] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'concat',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [Circular] },
             mergeId: 10 },
          locals: 
           Map {
             'items' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'items',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'join',
             parameters: [ [NodeObject] ],
             type: { flags: 2097152, kind: 'StringKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'join',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 12 },
             locals: Map { 'separator' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'slice',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Combines two or more arrays.' } ],
          name: 'concat',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               dotDotDotToken: [TokenObject],
               name: 'items',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'concat',
             declarations: [ [Circular], [NodeObject] ],
             valueDeclaration: [Circular],
             mergeId: 11 },
          locals: 
           Map {
             'items' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'items',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'concat',
             parameters: [ [NodeObject] ],
             type: 
              {
                flags: 'Ambient',
                kind: 'ArrayType',
                elementType: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'concat',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 11 },
             locals: Map { 'items' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'join',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Combines two or more arrays.' } ],
          name: 'concat',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               dotDotDotToken: [TokenObject],
               name: 'items',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'concat',
             declarations: [ [NodeObject], [Circular] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'concat',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [Circular] },
             mergeId: 11 },
          locals: 
           Map {
             'items' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'items',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'join',
             parameters: [ [NodeObject] ],
             type: { flags: 2097152, kind: 'StringKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'join',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 13 },
             locals: Map { 'separator' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'slice',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject] ],
             comment: 'Combines two or more arrays.' } ],
        name: 'concat',
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             dotDotDotToken: { flags: 2097152, kind: 'DotDotDotToken' },
             name: 'items',
             type: 
              {
                flags: 'Ambient',
                kind: 'ArrayType',
                elementType: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'items',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: 
         {
           flags: 'Ambient',
           kind: 'ArrayType',
           elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'concat',
           declarations: 
            [ [Circular],
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'concat',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] } ],
           valueDeclaration: [Circular],
           mergeId: 10 },
        locals: 
         Map {
           'items' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'items',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              dotDotDotToken: [TokenObject],
              name: 'items',
              type: [NodeObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'MethodSignature',
           jsDoc: 
            [ {
                flags: 'Ambient',
                kind: 'JSDocComment',
                tags: [Array],
                comment: 'Combines two or more arrays.' } ],
           name: 'concat',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                dotDotDotToken: [TokenObject],
                name: 'items',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: 
            {
              flags: 'Ambient',
              kind: 'ArrayType',
              elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
           modifierFlagsCache: 'HasComputedFlags (536870912)',
           symbol: 
            {
              flags: 'Method',
              escapedName: 'concat',
              declarations: [ [Circular], [Circular] ],
              valueDeclaration: [Circular],
              mergeId: 10 },
           locals: 
            Map {
              'items' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'items',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              jsDoc: [ [NodeObject] ],
              name: 'join',
              parameters: [ [NodeObject] ],
              type: { flags: 2097152, kind: 'StringKeyword' },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'join',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 12 },
              locals: Map { 'separator' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'MethodSignature',
                 jsDoc: [Array],
                 name: 'slice',
                 parameters: [Array],
                 type: [NodeObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'join' => {
     flags: 'Method | Transient',
     escapedName: 'join',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Adds all the elements of an array separated by the specified separator string.' } ],
          name: 'join',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'separator',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'StringKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'join',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 12 },
          locals: 
           Map {
             'separator' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'separator',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'slice',
             parameters: [ [NodeObject], [NodeObject] ],
             type: 
              {
                flags: 'Ambient',
                kind: 'ArrayType',
                elementType: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'slice',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 14 },
             locals: Map { 'start' => [SymbolObject], 'end' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'indexOf',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Adds all the elements of an array separated by the specified separator string.' } ],
          name: 'join',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'separator',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'StringKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'join',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 13 },
          locals: 
           Map {
             'separator' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'separator',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'slice',
             parameters: [ [NodeObject], [NodeObject] ],
             type: 
              {
                flags: 'Ambient',
                kind: 'ArrayType',
                elementType: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'slice',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 15 },
             locals: Map { 'start' => [SymbolObject], 'end' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'indexOf',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject] ],
             comment: 'Adds all the elements of an array separated by the specified separator string.' } ],
        name: 'join',
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'separator',
             questionToken: { flags: 2097152, kind: 'QuestionToken' },
             type: { flags: 2097152, kind: 'StringKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'separator',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: { flags: 2097152, kind: 'StringKeyword' },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'join',
           declarations: [ [Circular] ],
           valueDeclaration: [Circular],
           mergeId: 12 },
        locals: 
         Map {
           'separator' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'separator',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'separator',
              questionToken: [TokenObject],
              type: [TokenObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'MethodSignature',
           jsDoc: 
            [ {
                flags: 'Ambient',
                kind: 'JSDocComment',
                tags: [Array],
                comment: 'Returns a section of an array.' } ],
           name: 'slice',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'start',
                questionToken: [TokenObject],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'end',
                questionToken: [TokenObject],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: 
            {
              flags: 'Ambient',
              kind: 'ArrayType',
              elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
           modifierFlagsCache: 'HasComputedFlags (536870912)',
           symbol: 
            {
              flags: 'Method',
              escapedName: 'slice',
              declarations: [ [Circular] ],
              valueDeclaration: [Circular],
              mergeId: 14 },
           locals: 
            Map {
              'start' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'start',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'end' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'end',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              jsDoc: [ [NodeObject] ],
              name: 'indexOf',
              parameters: [ [NodeObject], [NodeObject] ],
              type: { flags: 2097152, kind: 'NumberKeyword' },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'indexOf',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 16 },
              locals: 
               Map {
                 'searchElement' => [SymbolObject],
                 'fromIndex' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'MethodSignature',
                 jsDoc: [Array],
                 name: 'lastIndexOf',
                 parameters: [Array],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'slice' => {
     flags: 'Method | Transient',
     escapedName: 'slice',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Returns a section of an array.' } ],
          name: 'slice',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'start',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'end',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'slice',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 14 },
          locals: 
           Map {
             'start' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'start',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'end' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'end',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'indexOf',
             parameters: [ [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'NumberKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'indexOf',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 16 },
             locals: 
              Map {
                'searchElement' => [SymbolObject],
                'fromIndex' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'lastIndexOf',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Returns a section of an array.' } ],
          name: 'slice',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'start',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'end',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'slice',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 15 },
          locals: 
           Map {
             'start' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'start',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'end' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'end',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'indexOf',
             parameters: [ [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'NumberKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'indexOf',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 17 },
             locals: 
              Map {
                'searchElement' => [SymbolObject],
                'fromIndex' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'lastIndexOf',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject], [NodeObject] ],
             comment: 'Returns a section of an array.' } ],
        name: 'slice',
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'start',
             questionToken: { flags: 2097152, kind: 'QuestionToken' },
             type: { flags: 2097152, kind: 'NumberKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'start',
                declarations: [Array],
                valueDeclaration: [Circular] } },
           {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'end',
             questionToken: { flags: 2097152, kind: 'QuestionToken' },
             type: { flags: 2097152, kind: 'NumberKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'end',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: 
         {
           flags: 'Ambient',
           kind: 'ArrayType',
           elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'slice',
           declarations: [ [Circular] ],
           valueDeclaration: [Circular],
           mergeId: 14 },
        locals: 
         Map {
           'start' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'start',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'start',
              questionToken: [TokenObject],
              type: [TokenObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } },
           'end' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'end',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'end',
              questionToken: [TokenObject],
              type: [TokenObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'MethodSignature',
           jsDoc: 
            [ {
                flags: 'Ambient',
                kind: 'JSDocComment',
                tags: [Array],
                comment: 'Returns the index of the first occurrence of a value in an array.' } ],
           name: 'indexOf',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'searchElement',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'fromIndex',
                questionToken: [TokenObject],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: { flags: 2097152, kind: 'NumberKeyword' },
           modifierFlagsCache: 'HasComputedFlags (536870912)',
           symbol: 
            {
              flags: 'Method',
              escapedName: 'indexOf',
              declarations: [ [Circular] ],
              valueDeclaration: [Circular],
              mergeId: 16 },
           locals: 
            Map {
              'searchElement' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'searchElement',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'fromIndex' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'fromIndex',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              jsDoc: [ [NodeObject] ],
              name: 'lastIndexOf',
              parameters: [ [NodeObject], [NodeObject] ],
              type: { flags: 2097152, kind: 'NumberKeyword' },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'lastIndexOf',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 18 },
              locals: 
               Map {
                 'searchElement' => [SymbolObject],
                 'fromIndex' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'MethodSignature',
                 jsDoc: [Array],
                 name: 'every',
                 parameters: [Array],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'indexOf' => {
     flags: 'Method | Transient',
     escapedName: 'indexOf',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Returns the index of the first occurrence of a value in an array.' } ],
          name: 'indexOf',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'searchElement',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'fromIndex',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'NumberKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'indexOf',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 16 },
          locals: 
           Map {
             'searchElement' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'searchElement',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'fromIndex' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'fromIndex',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'lastIndexOf',
             parameters: [ [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'NumberKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'lastIndexOf',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 18 },
             locals: 
              Map {
                'searchElement' => [SymbolObject],
                'fromIndex' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'every',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Returns the index of the first occurrence of a value in an array.' } ],
          name: 'indexOf',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'searchElement',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'fromIndex',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'NumberKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'indexOf',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 17 },
          locals: 
           Map {
             'searchElement' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'searchElement',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'fromIndex' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'fromIndex',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'lastIndexOf',
             parameters: [ [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'NumberKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'lastIndexOf',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 19 },
             locals: 
              Map {
                'searchElement' => [SymbolObject],
                'fromIndex' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'every',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject], [NodeObject] ],
             comment: 'Returns the index of the first occurrence of a value in an array.' } ],
        name: 'indexOf',
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'searchElement',
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'searchElement',
                declarations: [Array],
                valueDeclaration: [Circular] } },
           {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'fromIndex',
             questionToken: { flags: 2097152, kind: 'QuestionToken' },
             type: { flags: 2097152, kind: 'NumberKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'fromIndex',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: { flags: 2097152, kind: 'NumberKeyword' },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'indexOf',
           declarations: [ [Circular] ],
           valueDeclaration: [Circular],
           mergeId: 16 },
        locals: 
         Map {
           'searchElement' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'searchElement',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'searchElement',
              type: [NodeObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } },
           'fromIndex' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'fromIndex',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'fromIndex',
              questionToken: [TokenObject],
              type: [TokenObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'MethodSignature',
           jsDoc: 
            [ {
                flags: 'Ambient',
                kind: 'JSDocComment',
                tags: [Array],
                comment: 'Returns the index of the last occurrence of a specified value in an array.' } ],
           name: 'lastIndexOf',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'searchElement',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'fromIndex',
                questionToken: [TokenObject],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: { flags: 2097152, kind: 'NumberKeyword' },
           modifierFlagsCache: 'HasComputedFlags (536870912)',
           symbol: 
            {
              flags: 'Method',
              escapedName: 'lastIndexOf',
              declarations: [ [Circular] ],
              valueDeclaration: [Circular],
              mergeId: 18 },
           locals: 
            Map {
              'searchElement' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'searchElement',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'fromIndex' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'fromIndex',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              jsDoc: [ [NodeObject] ],
              name: 'every',
              parameters: [ [NodeObject], [NodeObject] ],
              type: { flags: 2097152, kind: 'BooleanKeyword' },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'every',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 20 },
              locals: Map { 'callbackfn' => [SymbolObject], 'thisArg' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'FunctionType',
                 parameters: [Array],
                 type: [TokenObject],
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'lastIndexOf' => {
     flags: 'Method | Transient',
     escapedName: 'lastIndexOf',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Returns the index of the last occurrence of a specified value in an array.' } ],
          name: 'lastIndexOf',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'searchElement',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'fromIndex',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'NumberKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'lastIndexOf',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 18 },
          locals: 
           Map {
             'searchElement' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'searchElement',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'fromIndex' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'fromIndex',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'every',
             parameters: [ [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'BooleanKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'every',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 20 },
             locals: Map { 'callbackfn' => [SymbolObject], 'thisArg' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'FunctionType',
                parameters: [Array],
                type: [TokenObject],
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Returns the index of the last occurrence of a specified value in an array.' } ],
          name: 'lastIndexOf',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'searchElement',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'fromIndex',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'NumberKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'lastIndexOf',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 19 },
          locals: 
           Map {
             'searchElement' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'searchElement',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'fromIndex' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'fromIndex',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'MethodSignature',
             jsDoc: [ [NodeObject] ],
             name: 'every',
             parameters: [ [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'BooleanKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Method',
                escapedName: 'every',
                declarations: [Array],
                valueDeclaration: [Circular],
                mergeId: 21 },
             locals: Map { 'callbackfn' => [SymbolObject], 'thisArg' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'FunctionType',
                parameters: [Array],
                type: [TokenObject],
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject], [NodeObject] ],
             comment: 'Returns the index of the last occurrence of a specified value in an array.' } ],
        name: 'lastIndexOf',
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'searchElement',
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'searchElement',
                declarations: [Array],
                valueDeclaration: [Circular] } },
           {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'fromIndex',
             questionToken: { flags: 2097152, kind: 'QuestionToken' },
             type: { flags: 2097152, kind: 'NumberKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'fromIndex',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: { flags: 2097152, kind: 'NumberKeyword' },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'lastIndexOf',
           declarations: [ [Circular] ],
           valueDeclaration: [Circular],
           mergeId: 18 },
        locals: 
         Map {
           'searchElement' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'searchElement',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'searchElement',
              type: [NodeObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } },
           'fromIndex' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'fromIndex',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'fromIndex',
              questionToken: [TokenObject],
              type: [TokenObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'MethodSignature',
           jsDoc: 
            [ {
                flags: 'Ambient',
                kind: 'JSDocComment',
                tags: [Array],
                comment: 'Determines whether all the members of an array satisfy the specified test.' } ],
           name: 'every',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'callbackfn',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'thisArg',
                questionToken: [TokenObject],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: { flags: 2097152, kind: 'BooleanKeyword' },
           modifierFlagsCache: 'HasComputedFlags (536870912)',
           symbol: 
            {
              flags: 'Method',
              escapedName: 'every',
              declarations: [ [Circular] ],
              valueDeclaration: [Circular],
              mergeId: 20 },
           locals: 
            Map {
              'callbackfn' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'callbackfn',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'thisArg' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'thisArg',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'FunctionType',
              parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
              type: { flags: 2097152, kind: 'BooleanKeyword' },
              symbol: 
               {
                 flags: 'TypeLiteral',
                 escapedName: '__type',
                 declarations: [Array],
                 members: [Map] },
              locals: 
               Map {
                 'value' => [SymbolObject],
                 'index' => [SymbolObject],
                 'array' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'MethodSignature',
                 jsDoc: [Array],
                 name: 'some',
                 parameters: [Array],
                 type: [TokenObject],
                 modifierFlagsCache: 'HasComputedFlags (536870912)',
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'every' => {
     flags: 'Method | Transient',
     escapedName: 'every',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Determines whether all the members of an array satisfy the specified test.' } ],
          name: 'every',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'BooleanKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'every',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 20 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'BooleanKeyword' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'some',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Determines whether all the members of an array satisfy the specified test.' } ],
          name: 'every',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'BooleanKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'every',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 21 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'BooleanKeyword' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'some',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject], [NodeObject] ],
             comment: 'Determines whether all the members of an array satisfy the specified test.' } ],
        name: 'every',
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'callbackfn',
             type: 
              {
                flags: 'Ambient',
                kind: 'FunctionType',
                parameters: [Array],
                type: [TokenObject],
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'callbackfn',
                declarations: [Array],
                valueDeclaration: [Circular] } },
           {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'thisArg',
             questionToken: { flags: 2097152, kind: 'QuestionToken' },
             type: { flags: 2097152, kind: 'AnyKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'thisArg',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: { flags: 2097152, kind: 'BooleanKeyword' },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'every',
           declarations: [ [Circular] ],
           valueDeclaration: [Circular],
           mergeId: 20 },
        locals: 
         Map {
           'callbackfn' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'callbackfn',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'callbackfn',
              type: [NodeObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } },
           'thisArg' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'thisArg',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'thisArg',
              questionToken: [TokenObject],
              type: [TokenObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'FunctionType',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'value',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'index',
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'array',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: { flags: 2097152, kind: 'BooleanKeyword' },
           symbol: 
            {
              flags: 'TypeLiteral',
              escapedName: '__type',
              declarations: [ [Circular] ],
              members: Map { '__call' => [SymbolObject] } },
           locals: 
            Map {
              'value' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'value',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'index' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'index',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'array' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'array',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              jsDoc: [ [NodeObject] ],
              name: 'some',
              parameters: [ [NodeObject], [NodeObject] ],
              type: { flags: 2097152, kind: 'BooleanKeyword' },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'some',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 22 },
              locals: Map { 'callbackfn' => [SymbolObject], 'thisArg' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'FunctionType',
                 parameters: [Array],
                 type: [TokenObject],
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'some' => {
     flags: 'Method | Transient',
     escapedName: 'some',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Determines whether the specified callback function returns true for any element of an array.' } ],
          name: 'some',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'BooleanKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'some',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 22 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'BooleanKeyword' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'forEach',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Determines whether the specified callback function returns true for any element of an array.' } ],
          name: 'some',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'BooleanKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'some',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 23 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'BooleanKeyword' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'forEach',
                parameters: [Array],
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject], [NodeObject] ],
             comment: 'Determines whether the specified callback function returns true for any element of an array.' } ],
        name: 'some',
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'callbackfn',
             type: 
              {
                flags: 'Ambient',
                kind: 'FunctionType',
                parameters: [Array],
                type: [TokenObject],
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'callbackfn',
                declarations: [Array],
                valueDeclaration: [Circular] } },
           {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'thisArg',
             questionToken: { flags: 2097152, kind: 'QuestionToken' },
             type: { flags: 2097152, kind: 'AnyKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'thisArg',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: { flags: 2097152, kind: 'BooleanKeyword' },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'some',
           declarations: [ [Circular] ],
           valueDeclaration: [Circular],
           mergeId: 22 },
        locals: 
         Map {
           'callbackfn' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'callbackfn',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'callbackfn',
              type: [NodeObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } },
           'thisArg' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'thisArg',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'thisArg',
              questionToken: [TokenObject],
              type: [TokenObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'FunctionType',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'value',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'index',
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'array',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: { flags: 2097152, kind: 'BooleanKeyword' },
           symbol: 
            {
              flags: 'TypeLiteral',
              escapedName: '__type',
              declarations: [ [Circular] ],
              members: Map { '__call' => [SymbolObject] } },
           locals: 
            Map {
              'value' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'value',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'index' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'index',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'array' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'array',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              jsDoc: [ [NodeObject] ],
              name: 'forEach',
              parameters: [ [NodeObject], [NodeObject] ],
              type: { flags: 2097152, kind: 'VoidKeyword' },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'forEach',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 24 },
              locals: Map { 'callbackfn' => [SymbolObject], 'thisArg' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'FunctionType',
                 parameters: [Array],
                 type: [TokenObject],
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'forEach' => {
     flags: 'Method | Transient',
     escapedName: 'forEach',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Performs the specified action for each element in an array.' } ],
          name: 'forEach',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'VoidKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'forEach',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 24 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'VoidKeyword' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'map',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Performs the specified action for each element in an array.' } ],
          name: 'forEach',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 2097152, kind: 'VoidKeyword' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'forEach',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 25 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'VoidKeyword' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'map',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject], [NodeObject] ],
             comment: 'Performs the specified action for each element in an array.' } ],
        name: 'forEach',
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'callbackfn',
             type: 
              {
                flags: 'Ambient',
                kind: 'FunctionType',
                parameters: [Array],
                type: [TokenObject],
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'callbackfn',
                declarations: [Array],
                valueDeclaration: [Circular] } },
           {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'thisArg',
             questionToken: { flags: 2097152, kind: 'QuestionToken' },
             type: { flags: 2097152, kind: 'AnyKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'thisArg',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: { flags: 2097152, kind: 'VoidKeyword' },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'forEach',
           declarations: [ [Circular] ],
           valueDeclaration: [Circular],
           mergeId: 24 },
        locals: 
         Map {
           'callbackfn' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'callbackfn',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'callbackfn',
              type: [NodeObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } },
           'thisArg' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'thisArg',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'thisArg',
              questionToken: [TokenObject],
              type: [TokenObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'FunctionType',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'value',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'index',
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'array',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: { flags: 2097152, kind: 'VoidKeyword' },
           symbol: 
            {
              flags: 'TypeLiteral',
              escapedName: '__type',
              declarations: [ [Circular] ],
              members: Map { '__call' => [SymbolObject] } },
           locals: 
            Map {
              'value' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'value',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'index' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'index',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'array' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'array',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              jsDoc: [ [NodeObject] ],
              name: 'map',
              typeParameters: [ [NodeObject] ],
              parameters: [ [NodeObject], [NodeObject] ],
              type: 
               {
                 flags: 'Ambient',
                 kind: 'ArrayType',
                 elementType: [NodeObject] },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'map',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 26 },
              locals: 
               Map {
                 'U' => [SymbolObject],
                 'callbackfn' => [SymbolObject],
                 'thisArg' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'FunctionType',
                 parameters: [Array],
                 type: [NodeObject],
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'map' => {
     flags: 'Method | Transient',
     escapedName: 'map',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Calls a defined callback function on each element of an array, and returns an array that contains the results.' } ],
          name: 'map',
          typeParameters: 
           [ {
               flags: 'Ambient',
               kind: 'TypeParameter',
               name: 'U',
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'map',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 26 },
          locals: 
           Map {
             'U' => {
             flags: 'TypeParameter',
             escapedName: 'U',
             declarations: [Array] },
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'filter',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Calls a defined callback function on each element of an array, and returns an array that contains the results.' } ],
          name: 'map',
          typeParameters: 
           [ {
               flags: 'Ambient',
               kind: 'TypeParameter',
               name: 'U',
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'map',
             declarations: [ [Circular] ],
             valueDeclaration: [Circular],
             mergeId: 27 },
          locals: 
           Map {
             'U' => {
             flags: 'TypeParameter',
             escapedName: 'U',
             declarations: [Array] },
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'filter',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject], [NodeObject] ],
             comment: 'Calls a defined callback function on each element of an array, and returns an array that contains the results.' } ],
        name: 'map',
        typeParameters: 
         [ {
             flags: 'Ambient',
             kind: 'TypeParameter',
             name: 'U',
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'TypeParameter',
                escapedName: 'U',
                declarations: [Array] } } ],
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'callbackfn',
             type: 
              {
                flags: 'Ambient',
                kind: 'FunctionType',
                parameters: [Array],
                type: [NodeObject],
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'callbackfn',
                declarations: [Array],
                valueDeclaration: [Circular] } },
           {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'thisArg',
             questionToken: { flags: 2097152, kind: 'QuestionToken' },
             type: { flags: 2097152, kind: 'AnyKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'thisArg',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: 
         {
           flags: 'Ambient',
           kind: 'ArrayType',
           elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' } },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'map',
           declarations: [ [Circular] ],
           valueDeclaration: [Circular],
           mergeId: 26 },
        locals: 
         Map {
           'U' => {
           flags: 'TypeParameter',
           escapedName: 'U',
           declarations: [ [NodeObject] ] },
           'callbackfn' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'callbackfn',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'callbackfn',
              type: [NodeObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } },
           'thisArg' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'thisArg',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'thisArg',
              questionToken: [TokenObject],
              type: [TokenObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'FunctionType',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'value',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'index',
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'array',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
           symbol: 
            {
              flags: 'TypeLiteral',
              escapedName: '__type',
              declarations: [ [Circular] ],
              members: Map { '__call' => [SymbolObject] } },
           locals: 
            Map {
              'value' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'value',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'index' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'index',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'array' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'array',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              jsDoc: [ [NodeObject] ],
              name: 'filter',
              typeParameters: [ [NodeObject] ],
              parameters: [ [NodeObject], [NodeObject] ],
              type: 
               {
                 flags: 'Ambient',
                 kind: 'ArrayType',
                 elementType: [NodeObject] },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'filter',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 28 },
              locals: 
               Map {
                 'S' => [SymbolObject],
                 'callbackfn' => [SymbolObject],
                 'thisArg' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'FunctionType',
                 parameters: [Array],
                 type: [NodeObject],
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'filter' => {
     flags: 'Method | Transient',
     escapedName: 'filter',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Returns the elements of an array that meet the condition specified in a callback function.' } ],
          name: 'filter',
          typeParameters: 
           [ {
               flags: 'Ambient',
               kind: 'TypeParameter',
               name: 'S',
               constraint: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'S' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'filter',
             declarations: [ [Circular], [NodeObject] ],
             valueDeclaration: [Circular],
             mergeId: 28 },
          locals: 
           Map {
             'S' => {
             flags: 'TypeParameter',
             escapedName: 'S',
             declarations: [Array] },
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: 
              {
                flags: 'Ambient',
                kind: 'FirstTypeNode',
                parameterName: 'value',
                type: [NodeObject] },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'filter',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Returns the elements of an array that meet the condition specified in a callback function.' } ],
          name: 'filter',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'filter',
             declarations: [ [NodeObject], [Circular] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'filter',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 28 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'AnyKeyword' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduce',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Returns the elements of an array that meet the condition specified in a callback function.' } ],
          name: 'filter',
          typeParameters: 
           [ {
               flags: 'Ambient',
               kind: 'TypeParameter',
               name: 'S',
               constraint: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'S' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'filter',
             declarations: [ [Circular], [NodeObject] ],
             valueDeclaration: [Circular],
             mergeId: 29 },
          locals: 
           Map {
             'S' => {
             flags: 'TypeParameter',
             escapedName: 'S',
             declarations: [Array] },
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: 
              {
                flags: 'Ambient',
                kind: 'FirstTypeNode',
                parameterName: 'value',
                type: [NodeObject] },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'filter',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Returns the elements of an array that meet the condition specified in a callback function.' } ],
          name: 'filter',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'thisArg',
               questionToken: [TokenObject],
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: 
           {
             flags: 'Ambient',
             kind: 'ArrayType',
             elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' } },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'filter',
             declarations: [ [NodeObject], [Circular] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'filter',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 29 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'thisArg' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'thisArg',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 2097152, kind: 'AnyKeyword' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'value' => [SymbolObject],
                'index' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduce',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject], [NodeObject] ],
             comment: 'Returns the elements of an array that meet the condition specified in a callback function.' } ],
        name: 'filter',
        typeParameters: 
         [ {
             flags: 'Ambient',
             kind: 'TypeParameter',
             name: 'S',
             constraint: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'TypeParameter',
                escapedName: 'S',
                declarations: [Array] } } ],
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'callbackfn',
             type: 
              {
                flags: 'Ambient',
                kind: 'FunctionType',
                parameters: [Array],
                type: [NodeObject],
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'callbackfn',
                declarations: [Array],
                valueDeclaration: [Circular] } },
           {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'thisArg',
             questionToken: { flags: 2097152, kind: 'QuestionToken' },
             type: { flags: 2097152, kind: 'AnyKeyword' },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'thisArg',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: 
         {
           flags: 'Ambient',
           kind: 'ArrayType',
           elementType: { flags: 'Ambient', kind: 'TypeReference', typeName: 'S' } },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'filter',
           declarations: 
            [ [Circular],
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'filter',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] } ],
           valueDeclaration: [Circular],
           mergeId: 28 },
        locals: 
         Map {
           'S' => {
           flags: 'TypeParameter',
           escapedName: 'S',
           declarations: [ [NodeObject] ] },
           'callbackfn' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'callbackfn',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'callbackfn',
              type: [NodeObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } },
           'thisArg' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'thisArg',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'thisArg',
              questionToken: [TokenObject],
              type: [TokenObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'FunctionType',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'value',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'index',
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'array',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: 
            {
              flags: 'Ambient',
              kind: 'FirstTypeNode',
              parameterName: 'value',
              type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'S' } },
           symbol: 
            {
              flags: 'TypeLiteral',
              escapedName: '__type',
              declarations: [ [Circular] ],
              members: Map { '__call' => [SymbolObject] } },
           locals: 
            Map {
              'value' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'value',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'index' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'index',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'array' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'array',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              jsDoc: [ [NodeObject] ],
              name: 'filter',
              parameters: [ [NodeObject], [NodeObject] ],
              type: 
               {
                 flags: 'Ambient',
                 kind: 'ArrayType',
                 elementType: [NodeObject] },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'filter',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 28 },
              locals: Map { 'callbackfn' => [SymbolObject], 'thisArg' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'FunctionType',
                 parameters: [Array],
                 type: [TokenObject],
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'reduce' => {
     flags: 'Method | Transient',
     escapedName: 'reduce',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
          name: 'reduce',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduce',
             declarations: [ [Circular], [NodeObject], [NodeObject] ],
             valueDeclaration: [Circular],
             mergeId: 30 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                name: 'reduce',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          name: 'reduce',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'initialValue',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduce',
             declarations: [ [NodeObject], [Circular], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduce',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 30 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'initialValue' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'initialValue',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduce',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
          name: 'reduce',
          typeParameters: 
           [ {
               flags: 'Ambient',
               kind: 'TypeParameter',
               name: 'U',
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'initialValue',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduce',
             declarations: [ [NodeObject], [NodeObject], [Circular] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduce',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 30 },
          locals: 
           Map {
             'U' => {
             flags: 'TypeParameter',
             escapedName: 'U',
             declarations: [Array] },
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'initialValue' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'initialValue',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduceRight',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
          name: 'reduce',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduce',
             declarations: [ [Circular], [NodeObject], [NodeObject] ],
             valueDeclaration: [Circular],
             mergeId: 31 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                name: 'reduce',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          name: 'reduce',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'initialValue',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduce',
             declarations: [ [NodeObject], [Circular], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduce',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 31 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'initialValue' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'initialValue',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduce',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
          name: 'reduce',
          typeParameters: 
           [ {
               flags: 'Ambient',
               kind: 'TypeParameter',
               name: 'U',
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'initialValue',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduce',
             declarations: [ [NodeObject], [NodeObject], [Circular] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduce',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 31 },
          locals: 
           Map {
             'U' => {
             flags: 'TypeParameter',
             escapedName: 'U',
             declarations: [Array] },
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'initialValue' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'initialValue',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduceRight',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject], [NodeObject] ],
             comment: 'Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
        name: 'reduce',
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'callbackfn',
             type: 
              {
                flags: 'Ambient',
                kind: 'FunctionType',
                parameters: [Array],
                type: [NodeObject],
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'callbackfn',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'reduce',
           declarations: 
            [ [Circular],
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                name: 'reduce',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduce',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] } ],
           valueDeclaration: [Circular],
           mergeId: 30 },
        locals: 
         Map {
           'callbackfn' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'callbackfn',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'callbackfn',
              type: [NodeObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'FunctionType',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'previousValue',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'currentValue',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'currentIndex',
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'array',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
           symbol: 
            {
              flags: 'TypeLiteral',
              escapedName: '__type',
              declarations: [ [Circular] ],
              members: Map { '__call' => [SymbolObject] } },
           locals: 
            Map {
              'previousValue' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'previousValue',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'currentValue' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'currentValue',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'currentIndex' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'currentIndex',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'array' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'array',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              name: 'reduce',
              parameters: [ [NodeObject], [NodeObject] ],
              type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'reduce',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 30 },
              locals: 
               Map {
                 'callbackfn' => [SymbolObject],
                 'initialValue' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'FunctionType',
                 parameters: [Array],
                 type: [NodeObject],
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     'reduceRight' => {
     flags: 'Method | Transient',
     escapedName: 'reduceRight',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
          name: 'reduceRight',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduceRight',
             declarations: [ [Circular], [NodeObject], [NodeObject] ],
             valueDeclaration: [Circular],
             mergeId: 32 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                name: 'reduceRight',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          name: 'reduceRight',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'initialValue',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduceRight',
             declarations: [ [NodeObject], [Circular], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduceRight',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 32 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'initialValue' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'initialValue',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduceRight',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
          name: 'reduceRight',
          typeParameters: 
           [ {
               flags: 'Ambient',
               kind: 'TypeParameter',
               name: 'U',
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'initialValue',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduceRight',
             declarations: [ [NodeObject], [NodeObject], [Circular] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduceRight',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 32 },
          locals: 
           Map {
             'U' => {
             flags: 'TypeParameter',
             escapedName: 'U',
             declarations: [Array] },
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'initialValue' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'initialValue',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'IndexSignature',
                modifiers: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
          name: 'reduceRight',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduceRight',
             declarations: [ [Circular], [NodeObject], [NodeObject] ],
             valueDeclaration: [Circular],
             mergeId: 33 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                name: 'reduceRight',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          name: 'reduceRight',
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'initialValue',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduceRight',
             declarations: [ [NodeObject], [Circular], [NodeObject] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduceRight',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 33 },
          locals: 
           Map {
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'initialValue' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'initialValue',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduceRight',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'MethodSignature',
          jsDoc: 
           [ {
               flags: 'Ambient',
               kind: 'JSDocComment',
               tags: [Array],
               comment: 'Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
          name: 'reduceRight',
          typeParameters: 
           [ {
               flags: 'Ambient',
               kind: 'TypeParameter',
               name: 'U',
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'callbackfn',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] },
             {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'initialValue',
               type: [NodeObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
          modifierFlagsCache: 'HasComputedFlags (536870912)',
          symbol: 
           {
             flags: 'Method',
             escapedName: 'reduceRight',
             declarations: [ [NodeObject], [NodeObject], [Circular] ],
             valueDeclaration: 
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduceRight',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
             mergeId: 33 },
          locals: 
           Map {
             'U' => {
             flags: 'TypeParameter',
             escapedName: 'U',
             declarations: [Array] },
             'callbackfn' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'callbackfn',
             declarations: [Array],
             valueDeclaration: [NodeObject] },
             'initialValue' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'initialValue',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'FunctionType',
             parameters: [ [NodeObject], [NodeObject], [NodeObject], [NodeObject] ],
             type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'U' },
             symbol: 
              {
                flags: 'TypeLiteral',
                escapedName: '__type',
                declarations: [Array],
                members: [Map] },
             locals: 
              Map {
                'previousValue' => [SymbolObject],
                'currentValue' => [SymbolObject],
                'currentIndex' => [SymbolObject],
                'array' => [SymbolObject] },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'IndexSignature',
                modifiers: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ],
     valueDeclaration: 
      {
        flags: 'Ambient',
        kind: 'MethodSignature',
        jsDoc: 
         [ {
             flags: 'Ambient',
             kind: 'JSDocComment',
             tags: [ [NodeObject], [NodeObject] ],
             comment: 'Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.' } ],
        name: 'reduceRight',
        parameters: 
         [ {
             flags: 'Ambient',
             kind: 'Parameter',
             name: 'callbackfn',
             type: 
              {
                flags: 'Ambient',
                kind: 'FunctionType',
                parameters: [Array],
                type: [NodeObject],
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] },
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'FunctionScopedVariable',
                escapedName: 'callbackfn',
                declarations: [Array],
                valueDeclaration: [Circular] } } ],
        type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
        modifierFlagsCache: 'HasComputedFlags (536870912)',
        symbol: 
         {
           flags: 'Method',
           escapedName: 'reduceRight',
           declarations: 
            [ [Circular],
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                name: 'reduceRight',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] },
              {
                flags: 'Ambient',
                kind: 'MethodSignature',
                jsDoc: [Array],
                name: 'reduceRight',
                typeParameters: [Array],
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [Circular],
                locals: [Map],
                nextContainer: [NodeObject] } ],
           valueDeclaration: [Circular],
           mergeId: 32 },
        locals: 
         Map {
           'callbackfn' => {
           flags: 'FunctionScopedVariable',
           escapedName: 'callbackfn',
           declarations: [ [NodeObject] ],
           valueDeclaration: 
            {
              flags: 'Ambient',
              kind: 'Parameter',
              name: 'callbackfn',
              type: [NodeObject],
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: [Circular] } } },
        nextContainer: 
         {
           flags: 'Ambient',
           kind: 'FunctionType',
           parameters: 
            [ {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'previousValue',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'currentValue',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'currentIndex',
                type: [TokenObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] },
              {
                flags: 'Ambient',
                kind: 'Parameter',
                name: 'array',
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject] } ],
           type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
           symbol: 
            {
              flags: 'TypeLiteral',
              escapedName: '__type',
              declarations: [ [Circular] ],
              members: Map { '__call' => [SymbolObject] } },
           locals: 
            Map {
              'previousValue' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'previousValue',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'currentValue' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'currentValue',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'currentIndex' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'currentIndex',
              declarations: [Array],
              valueDeclaration: [NodeObject] },
              'array' => {
              flags: 'FunctionScopedVariable',
              escapedName: 'array',
              declarations: [Array],
              valueDeclaration: [NodeObject] } },
           nextContainer: 
            {
              flags: 'Ambient',
              kind: 'MethodSignature',
              name: 'reduceRight',
              parameters: [ [NodeObject], [NodeObject] ],
              type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
              modifierFlagsCache: 'HasComputedFlags (536870912)',
              symbol: 
               {
                 flags: 'Method',
                 escapedName: 'reduceRight',
                 declarations: [Array],
                 valueDeclaration: [Circular],
                 mergeId: 32 },
              locals: 
               Map {
                 'callbackfn' => [SymbolObject],
                 'initialValue' => [SymbolObject] },
              nextContainer: 
               {
                 flags: 'Ambient',
                 kind: 'FunctionType',
                 parameters: [Array],
                 type: [NodeObject],
                 symbol: [SymbolObject],
                 locals: [Map],
                 nextContainer: [NodeObject] } } } } },
     '__index' => {
     flags: 'Signature | Transient',
     escapedName: '__index',
     checkFlags: ' (0)',
     declarations: 
      [ {
          flags: 'Ambient',
          kind: 'IndexSignature',
          modifiers: [ { flags: 2097152, kind: 'ReadonlyKeyword' } ],
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'n',
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
          modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
          symbol: 
           {
             flags: 'Signature',
             escapedName: '__index',
             declarations: [ [Circular] ],
             mergeId: 34 },
          locals: 
           Map {
             'n' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'n',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'InterfaceDeclaration',
             name: 'ArrayConstructor',
             members: 
              [ [NodeObject],
                [NodeObject],
                [NodeObject],
                [NodeObject],
                [NodeObject],
                [NodeObject],
                [NodeObject],
                [NodeObject] ],
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Interface',
                escapedName: 'ArrayConstructor',
                declarations: [Array],
                members: [Map],
                mergeId: 37 },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'ConstructSignature',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } },
        {
          flags: 'Ambient',
          kind: 'IndexSignature',
          modifiers: [ { flags: 2097152, kind: 'ReadonlyKeyword' } ],
          parameters: 
           [ {
               flags: 'Ambient',
               kind: 'Parameter',
               name: 'n',
               type: [TokenObject],
               modifierFlagsCache: 'HasComputedFlags (536870912)',
               symbol: [SymbolObject] } ],
          type: { flags: 'Ambient', kind: 'TypeReference', typeName: 'T' },
          modifierFlagsCache: 'Readonly | HasComputedFlags (536870976)',
          symbol: 
           {
             flags: 'Signature',
             escapedName: '__index',
             declarations: [ [Circular] ],
             mergeId: 35 },
          locals: 
           Map {
             'n' => {
             flags: 'FunctionScopedVariable',
             escapedName: 'n',
             declarations: [Array],
             valueDeclaration: [NodeObject] } },
          nextContainer: 
           {
             flags: 'Ambient',
             kind: 'InterfaceDeclaration',
             name: 'ArrayConstructor',
             members: 
              [ [NodeObject],
                [NodeObject],
                [NodeObject],
                [NodeObject],
                [NodeObject],
                [NodeObject],
                [NodeObject],
                [NodeObject] ],
             modifierFlagsCache: 'HasComputedFlags (536870912)',
             symbol: 
              {
                flags: 'Interface',
                escapedName: 'ArrayConstructor',
                declarations: [Array],
                members: [Map],
                mergeId: 46 },
             nextContainer: 
              {
                flags: 'Ambient',
                kind: 'ConstructSignature',
                parameters: [Array],
                type: [NodeObject],
                modifierFlagsCache: 'HasComputedFlags (536870912)',
                symbol: [SymbolObject],
                locals: [Map],
                nextContainer: [NodeObject] } } } ] } },
  declaredType: 
   {
     flags: 'Object',
     id: 41,
     objectFlags: 6,
     symbol: [Circular],
     typeParameters: 
      [ {
          flags: 'TypeParameter',
          id: 42,
          symbol: 
           {
             flags: 'TypeParameter | Transient',
             escapedName: 'T',
             checkFlags: ' (0)',
             declarations: 
              [ {
                  flags: 'Ambient',
                  kind: 'TypeParameter',
                  name: 'T',
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject] },
                {
                  flags: 'Ambient',
                  kind: 'TypeParameter',
                  name: 'T',
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject] } ],
             declaredType: [Circular] } } ],
     localTypeParameters: 
      [ {
          flags: 'TypeParameter',
          id: 42,
          symbol: 
           {
             flags: 'TypeParameter | Transient',
             escapedName: 'T',
             checkFlags: ' (0)',
             declarations: 
              [ {
                  flags: 'Ambient',
                  kind: 'TypeParameter',
                  name: 'T',
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject] },
                {
                  flags: 'Ambient',
                  kind: 'TypeParameter',
                  name: 'T',
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject] } ],
             declaredType: [Circular] } } ],
     instantiations: 
      Map {
        '42' => [Circular],
        '1' => {
        flags: 'Object',
        id: 44,
        objectFlags: 4,
        symbol: [Circular],
        target: [Circular],
        typeArguments: [ { flags: 'Any', id: 1, intrinsicName: 'any' } ] } },
     target: [Circular],
     typeArguments: 
      [ {
          flags: 'TypeParameter',
          id: 42,
          symbol: 
           {
             flags: 'TypeParameter | Transient',
             escapedName: 'T',
             checkFlags: ' (0)',
             declarations: 
              [ {
                  flags: 'Ambient',
                  kind: 'TypeParameter',
                  name: 'T',
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject] },
                {
                  flags: 'Ambient',
                  kind: 'TypeParameter',
                  name: 'T',
                  modifierFlagsCache: 'HasComputedFlags (536870912)',
                  symbol: [SymbolObject] } ],
             declaredType: [Circular] } } ],
     thisType: 
      {
        flags: 'TypeParameter',
        id: 43,
        isThisType: true,
        symbol: [Circular],
        constraint: [Circular] } } }
