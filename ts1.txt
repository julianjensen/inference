SourceFile [pos, end, flags, transformFlags, parent, kind, text, bindDiagnostics, languageVersion, fileName, languageVariant, isDeclarationFile, scriptKind, referencedFiles, typeReferenceDirectives, amdDependencies, moduleName, checkJsDirective, statements, endOfFileToken, externalModuleIndicator, nodeCount, identifierCount, identifiers, parseDiagnostics, path, imports, moduleAugmentations, ambientModuleNames, resolvedModules]
    [statements]: InterfaceDeclaration -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, heritageClauses, members, modifierFlagsCache]
        [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
        [members]: PropertySignature -> "length" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, type, jsDoc]
            [modifiers]: ReadonlyKeyword [pos, end, flags, parent, kind]
            [type]: NumberKeyword [pos, end, flags, parent, kind]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
        [members]: MethodSignature -> "toString" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [type]: StringKeyword [pos, end, flags, parent, kind]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
        [members]: MethodSignature -> "toLocaleString" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [type]: StringKeyword [pos, end, flags, parent, kind]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
        [members]: MethodSignature -> "concat" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "items" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [dotDotDotToken]: DotDotDotToken [pos, end, flags, parent, kind]
                [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                    [elementType]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                        [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "items" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "concat" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "items" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [dotDotDotToken]: DotDotDotToken [pos, end, flags, parent, kind]
                [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                    [elementType]: ParenthesizedType [pos, end, flags, transformFlags, parent, kind, type]
                        [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                            [types]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                            [types]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                                [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "items" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "join" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "separator" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: StringKeyword [pos, end, flags, parent, kind]
            [type]: StringKeyword [pos, end, flags, parent, kind]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "separator" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "slice" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "start" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: NumberKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "end" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: NumberKeyword [pos, end, flags, parent, kind]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "start" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "end" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "indexOf" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "searchElement" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "fromIndex" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: NumberKeyword [pos, end, flags, parent, kind]
            [type]: NumberKeyword [pos, end, flags, parent, kind]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "searchElement" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "fromIndex" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "lastIndexOf" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "searchElement" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "fromIndex" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: NumberKeyword [pos, end, flags, parent, kind]
            [type]: NumberKeyword [pos, end, flags, parent, kind]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "searchElement" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "fromIndex" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "every" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "value" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "index" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: BooleanKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "thisArg" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: AnyKeyword [pos, end, flags, parent, kind]
            [type]: BooleanKeyword [pos, end, flags, parent, kind]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "thisArg" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "some" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "value" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "index" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: BooleanKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "thisArg" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: AnyKeyword [pos, end, flags, parent, kind]
            [type]: BooleanKeyword [pos, end, flags, parent, kind]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "thisArg" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "forEach" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "value" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "index" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: VoidKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "thisArg" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: AnyKeyword [pos, end, flags, parent, kind]
            [type]: VoidKeyword [pos, end, flags, parent, kind]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "thisArg" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "map" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [typeParameters]: TypeParameter -> "U" [pos, end, flags, transformFlags, parent, kind, name]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "value" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "index" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: TypeReference -> "U" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "thisArg" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: AnyKeyword [pos, end, flags, parent, kind]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: TypeReference -> "U" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "thisArg" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "filter" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [typeParameters]: TypeParameter -> "S" [pos, end, flags, transformFlags, parent, kind, name, constraint]
                [constraint]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "value" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "index" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: FirstTypeNode [pos, end, flags, transformFlags, parent, kind, parameterName, type]
                        [type]: TypeReference -> "S" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "thisArg" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: AnyKeyword [pos, end, flags, parent, kind]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: TypeReference -> "S" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "thisArg" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "filter" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "value" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "index" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: AnyKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "thisArg" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: AnyKeyword [pos, end, flags, parent, kind]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "thisArg" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "reduce" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "previousValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentIndex" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "initialValue" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "reduce" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "previousValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentIndex" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "initialValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
        [members]: MethodSignature -> "reduce" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [typeParameters]: TypeParameter -> "U" [pos, end, flags, transformFlags, parent, kind, name]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "previousValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "U" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentIndex" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: TypeReference -> "U" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "initialValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: TypeReference -> "U" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: TypeReference -> "U" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "initialValue" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "reduceRight" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "previousValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentIndex" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "initialValue" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "reduceRight" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "previousValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentIndex" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "initialValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
        [members]: MethodSignature -> "reduceRight" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [typeParameters]: TypeParameter -> "U" [pos, end, flags, transformFlags, parent, kind, name]
            [parameters]: Parameter -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "previousValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "U" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [parameters]: Parameter -> "currentIndex" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: NumberKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "array" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: TypeReference -> "ReadonlyArray" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                            [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [type]: TypeReference -> "U" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "initialValue" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: TypeReference -> "U" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: TypeReference -> "U" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "callbackfn" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "initialValue" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: IndexSignature [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, parameters, type]
            [modifiers]: ReadonlyKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "n" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: NumberKeyword [pos, end, flags, parent, kind]
            [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
    [statements]: InterfaceDeclaration -> "ArrayConstructor" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, heritageClauses, members, modifierFlagsCache]
        [members]: ConstructSignature [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
            [parameters]: Parameter -> "arrayLength" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: NumberKeyword [pos, end, flags, parent, kind]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: AnyKeyword [pos, end, flags, parent, kind]
        [members]: ConstructSignature [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
            [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
            [parameters]: Parameter -> "arrayLength" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: NumberKeyword [pos, end, flags, parent, kind]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
        [members]: ConstructSignature [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
            [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
            [parameters]: Parameter -> "items" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [dotDotDotToken]: DotDotDotToken [pos, end, flags, parent, kind]
                [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                    [elementType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
        [members]: CallSignature [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
            [parameters]: Parameter -> "arrayLength" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: NumberKeyword [pos, end, flags, parent, kind]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: AnyKeyword [pos, end, flags, parent, kind]
        [members]: CallSignature [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
            [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
            [parameters]: Parameter -> "arrayLength" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: NumberKeyword [pos, end, flags, parent, kind]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
        [members]: CallSignature [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
            [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
            [parameters]: Parameter -> "items" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [dotDotDotToken]: DotDotDotToken [pos, end, flags, parent, kind]
                [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                    [elementType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: ArrayType [pos, end, flags, transformFlags, parent, kind, elementType]
                [elementType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
        [members]: MethodSignature -> "isArray" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type]
            [parameters]: Parameter -> "arg" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: AnyKeyword [pos, end, flags, parent, kind]
            [type]: FirstTypeNode [pos, end, flags, transformFlags, parent, kind, parameterName, type]
                [type]: TypeReference -> "Array" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                    [typeArguments]: AnyKeyword [pos, end, flags, parent, kind]
        [members]: PropertySignature -> "prototype" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, type]
            [modifiers]: ReadonlyKeyword [pos, end, flags, parent, kind]
            [type]: TypeReference -> "Array" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                [typeArguments]: AnyKeyword [pos, end, flags, parent, kind]
    [statements]: VariableStatement [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, declarationList, modifierFlagsCache]
        [modifiers]: DeclareKeyword [pos, end, flags, parent, kind]
        [declarationList]: VariableDeclarationList [pos, end, flags, transformFlags, parent, kind, declarations]
            [declarations]: VariableDeclaration -> "Array" [pos, end, flags, transformFlags, parent, kind, name, type, initializer]
                [type]: TypeReference -> "ArrayConstructor" [pos, end, flags, transformFlags, parent, kind, typeName]
    [statements]: InterfaceDeclaration -> "TypedPropertyDescriptor" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, heritageClauses, members, modifierFlagsCache]
        [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
        [members]: PropertySignature -> "enumerable" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, type]
            [questionToken]: QuestionToken [pos, end, flags, parent, kind]
            [type]: BooleanKeyword [pos, end, flags, parent, kind]
        [members]: PropertySignature -> "configurable" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, type]
            [questionToken]: QuestionToken [pos, end, flags, parent, kind]
            [type]: BooleanKeyword [pos, end, flags, parent, kind]
        [members]: PropertySignature -> "writable" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, type]
            [questionToken]: QuestionToken [pos, end, flags, parent, kind]
            [type]: BooleanKeyword [pos, end, flags, parent, kind]
        [members]: PropertySignature -> "value" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, type]
            [questionToken]: QuestionToken [pos, end, flags, parent, kind]
            [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
        [members]: PropertySignature -> "get" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, type]
            [questionToken]: QuestionToken [pos, end, flags, parent, kind]
            [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
        [members]: PropertySignature -> "set" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, type]
            [questionToken]: QuestionToken [pos, end, flags, parent, kind]
            [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                [parameters]: Parameter -> "value" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                    [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                [type]: VoidKeyword [pos, end, flags, parent, kind]
    [statements]: TypeAliasDeclaration -> "ClassDecorator" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, type, modifierFlagsCache]
        [modifiers]: DeclareKeyword [pos, end, flags, parent, kind]
        [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
            [typeParameters]: TypeParameter -> "TFunction" [pos, end, flags, transformFlags, parent, kind, name, constraint]
                [constraint]: TypeReference -> "Function" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "target" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: TypeReference -> "TFunction" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                [types]: TypeReference -> "TFunction" [pos, end, flags, transformFlags, parent, kind, typeName]
                [types]: VoidKeyword [pos, end, flags, parent, kind]
    [statements]: TypeAliasDeclaration -> "PropertyDecorator" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, type, modifierFlagsCache]
        [modifiers]: DeclareKeyword [pos, end, flags, parent, kind]
        [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
            [parameters]: Parameter -> "target" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: TypeReference -> "Object" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "propertyKey" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                    [types]: StringKeyword [pos, end, flags, parent, kind]
                    [types]: SymbolKeyword [pos, end, flags, parent, kind]
            [type]: VoidKeyword [pos, end, flags, parent, kind]
    [statements]: TypeAliasDeclaration -> "MethodDecorator" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, type, modifierFlagsCache]
        [modifiers]: DeclareKeyword [pos, end, flags, parent, kind]
        [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
            [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
            [parameters]: Parameter -> "target" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: TypeReference -> "Object" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "propertyKey" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                    [types]: StringKeyword [pos, end, flags, parent, kind]
                    [types]: SymbolKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "descriptor" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: TypeReference -> "TypedPropertyDescriptor" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                    [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                [types]: TypeReference -> "TypedPropertyDescriptor" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                    [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                [types]: VoidKeyword [pos, end, flags, parent, kind]
    [statements]: TypeAliasDeclaration -> "ParameterDecorator" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, type, modifierFlagsCache]
        [modifiers]: DeclareKeyword [pos, end, flags, parent, kind]
        [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
            [parameters]: Parameter -> "target" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: TypeReference -> "Object" [pos, end, flags, transformFlags, parent, kind, typeName]
            [parameters]: Parameter -> "propertyKey" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                    [types]: StringKeyword [pos, end, flags, parent, kind]
                    [types]: SymbolKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "parameterIndex" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: NumberKeyword [pos, end, flags, parent, kind]
            [type]: VoidKeyword [pos, end, flags, parent, kind]
    [statements]: TypeAliasDeclaration -> "PromiseConstructorLike" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, type, modifierFlagsCache]
        [modifiers]: DeclareKeyword [pos, end, flags, parent, kind]
        [type]: ConstructorType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
            [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
            [parameters]: Parameter -> "executor" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                    [parameters]: Parameter -> "resolve" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                            [parameters]: Parameter -> "value" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                                [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                                    [types]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                                    [types]: TypeReference -> "PromiseLike" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                                        [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                            [type]: VoidKeyword [pos, end, flags, parent, kind]
                    [parameters]: Parameter -> "reject" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                        [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                            [parameters]: Parameter -> "reason" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                                [type]: AnyKeyword [pos, end, flags, parent, kind]
                            [type]: VoidKeyword [pos, end, flags, parent, kind]
                    [type]: VoidKeyword [pos, end, flags, parent, kind]
            [type]: TypeReference -> "PromiseLike" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                [typeArguments]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
    [statements]: InterfaceDeclaration -> "PromiseLike" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, heritageClauses, members, modifierFlagsCache]
        [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
        [members]: MethodSignature -> "then" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [typeParameters]: TypeParameter -> "TResult1" [pos, end, flags, transformFlags, parent, kind, name, default]
                [default]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [typeParameters]: TypeParameter -> "TResult2" [pos, end, flags, transformFlags, parent, kind, name, default]
                [default]: NeverKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "onfulfilled" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                    [types]: ParenthesizedType [pos, end, flags, transformFlags, parent, kind, type]
                        [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                            [parameters]: Parameter -> "value" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                                [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                            [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                                [types]: TypeReference -> "TResult1" [pos, end, flags, transformFlags, parent, kind, typeName]
                                [types]: TypeReference -> "PromiseLike" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                                    [typeArguments]: TypeReference -> "TResult1" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [types]: UndefinedKeyword [pos, end, flags, parent, kind]
                    [types]: NullKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "onrejected" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                    [types]: ParenthesizedType [pos, end, flags, transformFlags, parent, kind, type]
                        [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                            [parameters]: Parameter -> "reason" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                                [type]: AnyKeyword [pos, end, flags, parent, kind]
                            [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                                [types]: TypeReference -> "TResult2" [pos, end, flags, transformFlags, parent, kind, typeName]
                                [types]: TypeReference -> "PromiseLike" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                                    [typeArguments]: TypeReference -> "TResult2" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [types]: UndefinedKeyword [pos, end, flags, parent, kind]
                    [types]: NullKeyword [pos, end, flags, parent, kind]
            [type]: TypeReference -> "PromiseLike" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                [typeArguments]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                    [types]: TypeReference -> "TResult1" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [types]: TypeReference -> "TResult2" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "onfulfilled" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "onrejected" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocReturnTag [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
    [statements]: InterfaceDeclaration -> "Promise" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, heritageClauses, members, jsDoc, modifierFlagsCache]
        [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
        [members]: MethodSignature -> "then" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [typeParameters]: TypeParameter -> "TResult1" [pos, end, flags, transformFlags, parent, kind, name, default]
                [default]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [typeParameters]: TypeParameter -> "TResult2" [pos, end, flags, transformFlags, parent, kind, name, default]
                [default]: NeverKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "onfulfilled" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                    [types]: ParenthesizedType [pos, end, flags, transformFlags, parent, kind, type]
                        [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                            [parameters]: Parameter -> "value" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                                [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                            [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                                [types]: TypeReference -> "TResult1" [pos, end, flags, transformFlags, parent, kind, typeName]
                                [types]: TypeReference -> "PromiseLike" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                                    [typeArguments]: TypeReference -> "TResult1" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [types]: UndefinedKeyword [pos, end, flags, parent, kind]
                    [types]: NullKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "onrejected" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                    [types]: ParenthesizedType [pos, end, flags, transformFlags, parent, kind, type]
                        [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                            [parameters]: Parameter -> "reason" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                                [type]: AnyKeyword [pos, end, flags, parent, kind]
                            [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                                [types]: TypeReference -> "TResult2" [pos, end, flags, transformFlags, parent, kind, typeName]
                                [types]: TypeReference -> "PromiseLike" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                                    [typeArguments]: TypeReference -> "TResult2" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [types]: UndefinedKeyword [pos, end, flags, parent, kind]
                    [types]: NullKeyword [pos, end, flags, parent, kind]
            [type]: TypeReference -> "Promise" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                [typeArguments]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                    [types]: TypeReference -> "TResult1" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [types]: TypeReference -> "TResult2" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "onfulfilled" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocParameterTag -> "onrejected" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocReturnTag [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [members]: MethodSignature -> "catch" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, typeParameters, parameters, type, jsDoc]
            [typeParameters]: TypeParameter -> "TResult" [pos, end, flags, transformFlags, parent, kind, name, default]
                [default]: NeverKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "onrejected" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [questionToken]: QuestionToken [pos, end, flags, parent, kind]
                [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                    [types]: ParenthesizedType [pos, end, flags, transformFlags, parent, kind, type]
                        [type]: FunctionType [pos, end, flags, transformFlags, parent, kind, typeParameters, parameters, type]
                            [parameters]: Parameter -> "reason" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                                [type]: AnyKeyword [pos, end, flags, parent, kind]
                            [type]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                                [types]: TypeReference -> "TResult" [pos, end, flags, transformFlags, parent, kind, typeName]
                                [types]: TypeReference -> "PromiseLike" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                                    [typeArguments]: TypeReference -> "TResult" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [types]: UndefinedKeyword [pos, end, flags, parent, kind]
                    [types]: NullKeyword [pos, end, flags, parent, kind]
            [type]: TypeReference -> "Promise" [pos, end, flags, transformFlags, parent, kind, typeName, typeArguments]
                [typeArguments]: UnionType [pos, end, flags, transformFlags, parent, kind, types]
                    [types]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                    [types]: TypeReference -> "TResult" [pos, end, flags, transformFlags, parent, kind, typeName]
            [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
                [tags]: JSDocParameterTag -> "onrejected" [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, name, isNameFirst, isBracketed, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
                [tags]: JSDocReturnTag [pos, end, flags, transformFlags, parent, kind, atToken, tagName, typeExpression, comment]
                    [atToken]: AtToken [pos, end, flags, parent, kind]
        [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
    [statements]: InterfaceDeclaration -> "ArrayLike" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, heritageClauses, members, modifierFlagsCache]
        [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
        [members]: PropertySignature -> "length" [pos, end, flags, transformFlags, parent, kind, modifiers, name, questionToken, type]
            [modifiers]: ReadonlyKeyword [pos, end, flags, parent, kind]
            [type]: NumberKeyword [pos, end, flags, parent, kind]
        [members]: IndexSignature [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, parameters, type]
            [modifiers]: ReadonlyKeyword [pos, end, flags, parent, kind]
            [parameters]: Parameter -> "n" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, dotDotDotToken, name, questionToken, type, initializer]
                [type]: NumberKeyword [pos, end, flags, parent, kind]
            [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
    [statements]: TypeAliasDeclaration -> "Partial" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, type, jsDoc, modifierFlagsCache]
        [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
        [type]: MappedType [pos, end, flags, transformFlags, parent, kind, readonlyToken, typeParameter, questionToken, type]
            [typeParameter]: TypeParameter -> "P" [pos, end, flags, transformFlags, parent, kind, name, constraint]
                [constraint]: TypeOperator [pos, end, flags, transformFlags, parent, kind, operator, type]
                    [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [questionToken]: QuestionToken [pos, end, flags, parent, kind]
            [type]: IndexedAccessType [pos, end, flags, transformFlags, parent, kind, objectType, indexType]
                [objectType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                [indexType]: TypeReference -> "P" [pos, end, flags, transformFlags, parent, kind, typeName]
        [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
    [statements]: TypeAliasDeclaration -> "Readonly" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, type, jsDoc, modifierFlagsCache]
        [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
        [type]: MappedType [pos, end, flags, transformFlags, parent, kind, readonlyToken, typeParameter, questionToken, type]
            [readonlyToken]: ReadonlyKeyword [pos, end, flags, parent, kind]
            [typeParameter]: TypeParameter -> "P" [pos, end, flags, transformFlags, parent, kind, name, constraint]
                [constraint]: TypeOperator [pos, end, flags, transformFlags, parent, kind, operator, type]
                    [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: IndexedAccessType [pos, end, flags, transformFlags, parent, kind, objectType, indexType]
                [objectType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                [indexType]: TypeReference -> "P" [pos, end, flags, transformFlags, parent, kind, typeName]
        [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
    [statements]: TypeAliasDeclaration -> "Pick" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, type, jsDoc, modifierFlagsCache]
        [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
        [typeParameters]: TypeParameter -> "K" [pos, end, flags, transformFlags, parent, kind, name, constraint]
            [constraint]: TypeOperator [pos, end, flags, transformFlags, parent, kind, operator, type]
                [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
        [type]: MappedType [pos, end, flags, transformFlags, parent, kind, readonlyToken, typeParameter, questionToken, type]
            [typeParameter]: TypeParameter -> "P" [pos, end, flags, transformFlags, parent, kind, name, constraint]
                [constraint]: TypeReference -> "K" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: IndexedAccessType [pos, end, flags, transformFlags, parent, kind, objectType, indexType]
                [objectType]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
                [indexType]: TypeReference -> "P" [pos, end, flags, transformFlags, parent, kind, typeName]
        [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
    [statements]: TypeAliasDeclaration -> "Record" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, type, jsDoc, modifierFlagsCache]
        [typeParameters]: TypeParameter -> "K" [pos, end, flags, transformFlags, parent, kind, name, constraint]
            [constraint]: StringKeyword [pos, end, flags, parent, kind]
        [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
        [type]: MappedType [pos, end, flags, transformFlags, parent, kind, readonlyToken, typeParameter, questionToken, type]
            [typeParameter]: TypeParameter -> "P" [pos, end, flags, transformFlags, parent, kind, name, constraint]
                [constraint]: TypeReference -> "K" [pos, end, flags, transformFlags, parent, kind, typeName]
            [type]: TypeReference -> "T" [pos, end, flags, transformFlags, parent, kind, typeName]
        [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
    [statements]: InterfaceDeclaration -> "ThisType" [pos, end, flags, transformFlags, parent, kind, decorators, modifiers, name, typeParameters, heritageClauses, members, jsDoc, modifierFlagsCache]
        [typeParameters]: TypeParameter -> "T" [pos, end, flags, transformFlags, parent, kind, name]
        [jsDoc]: JSDocComment [pos, end, flags, transformFlags, parent, kind, tags, comment]
    [endOfFileToken]: EndOfFileToken [pos, end, flags, parent, kind]
